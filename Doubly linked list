#include<stdio.h>
#include<stdlib.h>
struct node
{
    struct node *Llink;
    struct node *Rlink;
    int data;
};
struct node *head;
void insert_front()
{
   struct node *ptr;
   int item;
   ptr = (struct node *)malloc(sizeof(struct node));
   if(ptr == NULL)
   {
       printf("\nOVERFLOW");
   }
   else
   {
    printf("\nEnter the value to be inserted ");
    scanf("%d",&item);

   if(head==NULL)
   {
       ptr->Rlink = NULL;
       ptr->Llink=NULL;
       ptr->data=item;
       head=ptr;
   }
   else
   {
       ptr->data=item;
       ptr->Llink=NULL;
       ptr->Rlink = head;
       head->Llink=ptr;
       head=ptr;
   }
   printf("\nNode inserted\n");
}

}
void insert_end()
{
   struct node *ptr,*temp;
   int item;
   ptr = (struct node *) malloc(sizeof(struct node));
   if(ptr == NULL)
   {
       printf("\nOVERFLOW");
   }
   else
   {
       printf("\nEnter value to be inserted ");
       scanf("%d",&item);
        ptr->data=item;
       if(head == NULL)
       {
           ptr->Rlink = NULL;
           ptr->Llink = NULL;
           head = ptr;
       }
       else
       {
          temp = head;
          while(temp->Rlink!=NULL)
          {
              temp = temp->Rlink;
          }
          temp->Rlink = ptr;
          ptr ->Llink=temp;
          ptr->Rlink = NULL;
          }

       }
     printf("Node inserted");
    }
void insert_pos()
{
   struct node *ptr,*temp;
   int item,loc,i;
   ptr=(struct node*)malloc(sizeof(struct node));
   if(ptr == NULL)
   {
       printf("\n OVERFLOW");
   }
   else
   {
       temp=head;
       printf("Enter the location ");
       scanf("%d",&loc);
       for(i=0;i<loc;i++)
       {
           temp=temp->Rlink;
           if(temp==NULL)
           {
               printf("\n Memory not available");
               return;
           }
       }
       printf("Enter the value to be inserted ");
       scanf("%d",&item);
       ptr->data=item;
       ptr->Rlink=temp->Rlink;
       ptr->Llink=temp;
       temp->Rlink=ptr;
       temp->Rlink->Llink=ptr;
       printf("Node inserted");
   }
}
void delete_front()
{
    struct node *ptr;
    if(head == NULL)
    {
        printf("\n UNDERFLOW");
    }
    else if(head->Rlink == NULL)
    {
        head = NULL;
        free(head);
        printf("Node deleted");
    }
    else
    {
        ptr = head;
        head = head -> Rlink;
        head -> Llink = NULL;
        free(ptr);
        printf("Node deleted");
    }

}
void delete_end()
{
    struct node *ptr;
    if(head == NULL)
    {
        printf("\n UNDERFLOW");
    }
    else if(head->Rlink == NULL)
    {
        head = NULL;
        free(head);
        printf("Node deleted");
    }
    else
    {
        ptr = head;
        if(ptr->Rlink != NULL)
        {
            ptr = ptr -> Rlink;
        }
        ptr -> Llink -> Rlink = NULL;
        free(ptr);
        printf("Node deleted");
    }
}
void delete_pos()
{
    struct node *ptr, *temp;
    int val;
    printf("Enter the data after which the node is to be deleted : ");
    scanf("%d", &val);
    ptr = head;
    while(ptr -> data != val)
    ptr = ptr -> Rlink;
    if(ptr -> Rlink == NULL)
    {
        printf("\nCannot delete\n");
    }
    else if(ptr ->Rlink->Rlink == NULL)
    {
        ptr ->Rlink = NULL;
    }
    else
    {
        temp = ptr ->Rlink;
        ptr -> Rlink = temp ->Rlink;
        temp ->Rlink->Llink= ptr;
        free(temp);
        printf("\nNode deleted\n");
    }
}
void display()
{
    struct node *ptr;
    printf("\n The values are\n");
    ptr = head;
    while(ptr != NULL)
    {
        printf("%d\n",ptr->data);
        ptr=ptr->Rlink;
    }
}


void main ()
{
int choice =0;
    while(choice != 9)
    {
        printf("\n1.Insert in begining\n2.Insert at last\n3.Insert at any random location\n4.Delete from Beginning\n5.Delete from last\n6.Delete the node after the given data\n7.display\n8.exit");
        printf("\nEnter your choice:");
        scanf("\n%d",&choice);
        switch(choice)
        {
            case 1:
                      insert_front();
                     break;
            case 2:
                    insert_end();
                   break;
            case 3:
                    insert_pos();
                    break;
            case 4:
                    delete_front();
                   break;
            case 5:
                    delete_end();
                     break;
            case 6:
                    delete_pos();
                   break;
            case 7:
                    display();
                     break;
            case 8:
                  exit(0);
                   break;
            default:
            printf("Please enter valid choice..");
        }
    }
}
